pipeline {
    agent any
    stages {
        stage('Check Frontend Changes') {
            steps {
                script {
                    def frontendChanges = changeset(['Front/cyesfront'])
                    if (frontendChanges.length > 0) {
                        echo 'Frontend changes detected'
                        buildFrontend()
                    } else {
                        echo 'No Frontend changes detected'
                    }
                }
            }
        }

        stage('Check Backend Changes') {
            steps {
                script {
                    def backendChanges = changeset(['Server/webserver'])
                    if (backendChanges.length > 0) {
                        echo 'Backend changes detected'
                        buildBackend()
                    } else {
                        echo 'No Backend changes detected'
                    }
                }
            }
        }
    }
}

def buildFrontend() {
    stage('FE build') {
        steps {
            dir('Front/cyesfront') {
                sh '''
                    pwd
                    echo 'Frontend build'
                    DEBIAN_FRONTEND=noninteractive apt install -y npm
                    npm install
                    CI=false npm run build
                '''
            }
        }
    }

    stage('FE Dockerimage build') {
        steps {
            dir('Front/cyesfront') {
                sh '''
                    echo 'Dockerimage build'
                    docker build --no-cache -t cyes_front:0.0.1 .
                '''
            }
        }
    }

    stage('FE Deploy') {
        steps {
            dir('Front/cyesfront') {
                sh '''
                    echo 'FE Deploy'
                    result=$(docker container ls -a --filter "name=cyes_front" -q)
                    if [ -n "$result" ]; then
                        docker stop $result
                        docker rm $result
                    else
                        echo "No such containers"
                    fi
                    docker run -d -p 127.0.0.1:9510:80 --name cyes_front cyes_front:0.0.1
                    docker images -f "dangling=true" -q | xargs -r docker rmi
                '''
            }
        }
    }
}

def buildBackend() {
    stage('BE build') {
        steps {
            dir('Server/webserver') {
                sh '''
                    pwd
                    echo 'springboot build'
                    chmod +x gradlew
                    ./gradlew clean build
                '''
            }
        }
    }

    stage('BE Dockerimage build') {
        steps {
            dir('Server/webserver') {
                sh '''
                    echo 'Dockerimage build'
                    docker build -t docker-springboot:0.0.1 .
                '''
            }
        }
    }

    stage('BE Deploy') {
        steps {
            dir('Server/webserver') {
                sh '''
                    echo 'BE Deploy'
                    result=$(docker container ls -a --filter "name=cyes_back" -q)
                    if [ -n "$result" ]; then
                        docker stop $result
                        docker rm $result
                    else
                        echo "No such containers"
                    fi
                    docker run -d -p 127.0.0.1:5000:5000 --name cyes_back docker-springboot:0.0.1
                    docker images -f "dangling=true" -q | xargs -r docker rmi
                '''
            }
        }
    }
}

def changeset(folders) {
    def changeList = []
    for (folder in folders) {
        changeList.addAll(currentBuild.changeSets.collect { it.affectedFiles.collect { file -> file.path.startsWith(folder) } }.flatten())
    }
    return changeList
}

