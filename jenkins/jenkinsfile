pipeline {
    agent any

stages {
    
    stage('MSA Container Deploy') {
                    steps {
                        dir('/'){
                            
                          script {
                    def fileName = 'docker-springboot.tar'

                    // 파일이 존재하는지 확인
                    if (fileExists(fileName)) {
                        echo "Deleting ${fileName}"
                        // 파일 삭제
                        sh "rm ${fileName}"
                    } else {
                        echo "${fileName} does not exist. Skipping deletion."
                    }
                        


                }              
                sh '''       
                        docker save -o spring-boot.tar docker-springboot:0.0.1  
                        //spring-boot.tar 있으면 삭제 그리고 만들기
                        scp -i /jenkins_key /docker-springboot.tar ubuntu@k9b103a.p.ssafy.io:/home/ubuntu 
                        // 컨테이너 원격에 복사하기
                           
   '''
                        

                            // 1. 원격서버에 spring-boot.tar이 있으면 삭제
                            //ssh -i /jenkins_key ubuntu@k9b103a.p.ssafy.io "rm docker-springboot.tar" // 원격서버에서 docker-springboot.tar 삭제하기

                            // 2. 원격서버에 spring 컨테이너 실행중이면 멈추고 삭제, 이미지 있으면 삭제, 다 했으면 복사하기
                            //ssh -i /jenkins_key ubuntu@k9b103a.p.ssafy.io "docker stop cyes_back" // 컨테이너 stop
                            //ssh -i /jenkins_key ubuntu@k9b103a.p.ssafy.io "docker rm cyes_back" // 컨테이너 삭제
                            //ssh -i /jenkins_key ubuntu@k9b103a.p.ssafy.io "docker rmi cyes_back" // spring 이미지 삭제

                            //ssh -i /jenkins_key ubuntu@k9b103a.p.ssafy.io "docker load -i docker-springboot.tar" // tar load 하기
                            //ssh -i /jenkins_key ubuntu@k9b103a.p.ssafy.io "docker run -d -p 127.0.0.1:5000:5000 -p 1026:5000 --name cyes_back -e JAVA_OPTS="-Duser.timezone=Asia/Seoul" docker-springboot:0.0.1" // spring 이미지 run 하기
                        } 
                            
                        }
                    }

    stage('where one') {
             steps {
                 // 현재 위치를 파악하는 부분
                 sh """
                 echo "first come"
                     pwd
                 """
             }
         } // stage

    
      //백엔드
            stage('BE build') {
               
                steps {
                     
                    dir('Server/webserver'){
                        sh '''
                        pwd
                        echo 'springboot build'
                        chmod +x gradlew
                        ./gradlew clean build -x test
                        '''
                    }
                }
            }

            stage('where two') {
             steps {
                 // 현재 위치를 파악하는 부분
                 sh """
                 echo "seconde come"
                     pwd
                 """
             }
         } // stage

            stage('BE Dockerimage build') {
                
                steps {
            
                    dir('Server/webserver'){
                        sh '''
                        echo 'Dockerimage build'
                        docker build -t docker-springboot:0.0.1 .
                        '''
                    }
                }
            }
            
            
            stage('BE Deploy') {
                
                steps {
                    
                    dir('Server/webserver'){

                        sh '''
                        echo 'Deploy'

                        result=$( docker container ls -a --filter "name=cyes_back" -q )
                        if [ -n "$result" ]; then
                                docker stop $result
                                docker rm $result
                            
                            else
                                echo "No such containers"
                            fi
                        docker run -d -p 127.0.0.1:5000:5000 -p 1026:5000 --name cyes_back -e JAVA_OPTS="-Duser.timezone=Asia/Seoul" docker-springboot:0.0.1

                      
                        docker images -f "dangling=true" -q | xargs -r docker rmi
                        '''
                    }
                }
            }
      

            //프론트 엔드
            stage('FE build') {
                steps {
                    dir('Front/cyesfront'){
                        sh '''
                            pwd
                            echo 'Frontend build'
                             DEBIAN_FRONTEND=noninteractive apt install -y npm

                            npm install
                            CI=false npm run build
                        '''
                    }
                }
            }
            stage('FE Dockerimage build') {
                steps {
                    dir('Front/cyesfront'){
                        sh '''
                            echo 'Dockerimage build'
                            docker build --no-cache -t cyes_front:0.0.1 .
                        '''
                    }
                }
            }
            stage('FE Deploy') {
                steps {
                    dir('Front/cyesfront'){

                        sh '''
                            echo 'FE Deploy'

                        result=$( docker container ls -a --filter "name=cyes_front" -q )
                        if [ -n "$result" ]; then
                                docker stop $result
                                docker rm $result
                            
                            else
                                echo "No such containers"
                            fi
                            
                        docker run -d -p 127.0.0.1:9510:80 --name cyes_front cyes_front:0.0.1
                        docker images -f "dangling=true" -q | xargs -r docker rmi
                        '''
                    }
                }
            }
        }
    }
